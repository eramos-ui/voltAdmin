"use strict";exports.id=5397,exports.ids=[5397],exports.modules={95397:(e,r,t)=>{t.d(r,{Af:()=>n,Od:()=>i,TG:()=>o,Yt:()=>l,lg:()=>a});let a=async(e,r,t)=>{Object.keys(r).forEach(e=>{"string"==typeof r[e]&&"rut"===e&&(r[e]=t(r[e]))});try{let t=await fetch("/api/saveWithJson",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({storedProcedure:e,parameters:r})});if(!t.ok){let e=await t.json();return console.error("Error al consumir la API (0):",e),{success:!1,error:e||t.statusText}}let a=await t.json();return{success:!0,result:a}}catch(e){return console.error("Error al consumir la API (1):",e),{success:!1,error:e}}},i=async(e,r)=>{let t;try{let[a,i]=e.split("(");if(r){let e=i.replace(")","").split(",").map(e=>e.trim().replace("@","")).reduce((e,t)=>(e[`@${t}`]=r,e),{});t=await fetch("/api/execSP",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({storedProcedure:a,parameters:e})})}else t=await fetch("/api/execSP",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({storedProcedure:a})});if(!t.ok)throw console.error("Error al obtener las opciones"),Error(`Error al obtener opciones: ${t.statusText}`);return(await t.json()).map(e=>({value:e.id,label:e.label}))}catch(e){throw console.error("Error al consumir la API:",e),e}},o=async(e,r,t,a)=>{try{let a=await fetch(`/api/getProjectFromTask?idTask=${e}&userId=${r}`);if(!a.ok)throw Error(`Failed to fetch form data: ${a.statusText}`);let i=await a.json(),o=async e=>{if(!e)return null;try{if(e.fileContent&&e.fileContent.length>0){let r=new Blob([e.fileContent],{type:e.fileType});return new File([r],e.fileName,{type:e.fileType,lastModified:Date.now()})}if(e.filePath&&e.filePath.length>0){let r=await fetch(e.filePath);if(!r.ok)throw Error(`Error leyendo archivo: ${e.filePath}`);let t=await r.blob();return new File([t],e.fileName,{type:e.fileType,lastModified:Date.now()})}return null}catch(e){return console.error("Error en transformToFile:",e),null}},l={kmlFile:await o(i.project.kmlFile),excelFile:await o(i.project.excelFile)},n=await Promise.all(i.project.empalmesGrid.map(async e=>({...e,rutCliente:await o(i.files[String(e.nroEmpalme)]?.find(e=>e.fileClass.includes("rutCliente"))),boleta:await o(i.files[String(e.nroEmpalme)]?.find(e=>e.fileClass.includes("boleta"))),poder:await o(i.files[String(e.nroEmpalme)]?.find(e=>e.fileClass.includes("poder"))),f2:await o(i.files[String(e.nroEmpalme)]?.find(e=>e.fileClass.includes("f2"))),diagrama:await o(i.files[String(e.nroEmpalme)]?.find(e=>e.fileClass.includes("diagrama"))),foto:await o(i.files[String(e.nroEmpalme)]?.find(e=>e.fileClass.includes("foto"))),otrasImagenes:await o(i.files[String(e.nroEmpalme)]?.find(e=>e.fileClass.includes("otrasImagenes")))}))),s=await Promise.all(i.project.instalacionesGrid.map(async e=>({...e,memoriaCalculo:await o(i.files[String(e.nroInstalacion)]?.find(e=>e.fileClass.includes("memoriaCalculo")))}))),c=await Promise.all(i.project.techoGrid.map(async e=>({...e,imagenTecho:await o(i.files[`${e.nroInstalacion}_${e.nroAgua}`]?.find(e=>e.fileClass.includes("imagenTecho")))})));t({...i.project,...l,empalmesGrid:n,instalacionesGrid:s,techoGrid:c})}catch(e){console.error("❌ Error en loadDataProject:",e)}},l=async(e,r,t)=>{try{let a=await fetch(`/api/getActivityFromTask?idTask=${e} &userId=${r}`);if(!a.ok)throw Error(`Failed to fetch form data: ${a.statusText}`);let i=await a.json();t({numActividad:i.numActividad,actividad:i.actividad,fechaInicio:i.fechaInicio,fechaTermino:i.fechaTermino,duracion:i.duracion,presupuesto:i.presupuesto,responsable:i.responsable,formaEjecucion:i.formaEjecucion,periodoControl:i.periodoControl,ejecutor:i.ejecutor,idProjectActivity:i.idProjectActivity,idTask:i.idTask,idTransaction:i.idTransaction,idProject:i.idProject,projectName:i.projectName,ubicacionPanel:i.ubicacionPanel,nroInstalaciones:i.nroInstalaciones,tipoTerreno:i.tipoTerreno,nivelPiedras:i.nivelPiedra,nivelFreatico:i.nivelFreatico});return}catch(e){console.log("error")}},n=async(e,r)=>{let t;try{let[a,i]=e.split("(");if(r){let e=i.replace(")","").split(",").map(e=>e.trim().replace("@","")).reduce((e,t)=>(e[`@${t}`]=r,e),{});t=await fetch("/api/execSP",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({storedProcedure:a,parameters:e})})}else t=await fetch("/api/execSP",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({storedProcedure:a})});if(!t.ok)throw console.error("Error al obtener resultSet"),Error(`Error al obtener opciones: ${t.statusText}`);return await t.json()}catch(e){throw console.error("Error al consumir la API:",e),e}}}};